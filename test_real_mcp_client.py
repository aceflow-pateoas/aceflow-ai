#!/usr/bin/env python3
"""
ÁúüÂÆûMCPÂÆ¢Êà∑Á´ØÊµãËØï
Real MCP Client Test

Ê®°ÊãüÁúüÂÆûÁöÑMCPÂÆ¢Êà∑Á´ØÁéØÂ¢ÉÔºåÊµãËØïÁªü‰∏ÄÊúçÂä°Âô®ÁöÑMCPÂçèËÆÆÂÖºÂÆπÊÄß
"""

import asyncio
import json
import sys
import os
import subprocess
import tempfile
from pathlib import Path
from typing import Dict, Any, List

# Ê∑ªÂä†È°πÁõÆË∑ØÂæÑ
sys.path.insert(0, str(Path(__file__).parent / "aceflow-mcp-server"))

class MCPClientTester:
    """MCPÂÆ¢Êà∑Á´ØÊµãËØïÂô®"""
    
    def __init__(self):
        self.test_results = []
        
    async def test_mcp_protocol_compatibility(self):
        """ÊµãËØïMCPÂçèËÆÆÂÖºÂÆπÊÄß"""
        print("üöÄ Testing MCP Protocol Compatibility")
        print("=" * 50)
        
        # ÂàõÂª∫‰∏¥Êó∂MCPÈÖçÁΩÆ
        mcp_config = {
            "mcpServers": {
                "aceflow-unified-test": {
                    "command": "python",
                    "args": [
                        str(Path(__file__).parent / "aceflow-mcp-server" / "unified_server.py")
                    ],
                    "env": {
                        "ACEFLOW_MODE": "enhanced",
                        "ACEFLOW_LOG_LEVEL": "INFO"
                    }
                }
            }
        }
        
        # ‰øùÂ≠òÈÖçÁΩÆÂà∞‰∏¥Êó∂Êñá‰ª∂
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(mcp_config, f, indent=2)
            config_file = f.name
        
        try:
            # ÊµãËØïMCPÊúçÂä°Âô®ÂêØÂä®
            await self.test_server_startup(config_file)
            
            # ÊµãËØïÂ∑•ÂÖ∑ÂèëÁé∞
            await self.test_tool_discovery()
            
            # ÊµãËØïÂ∑•ÂÖ∑Ë∞ÉÁî®
            await self.test_tool_invocation()
            
            # ÊµãËØïËµÑÊ∫êËÆøÈóÆ
            await self.test_resource_access()
            
            # ÊµãËØïÈîôËØØÂ§ÑÁêÜ
            await self.test_error_handling()
            
        finally:
            os.unlink(config_file)
        
        # ÁîüÊàêÊµãËØïÊä•Âëä
        self.generate_mcp_test_report()
    
    async def test_server_startup(self, config_file):
        """ÊµãËØïÊúçÂä°Âô®ÂêØÂä®"""
        print("üß™ Testing server startup...")
        
        try:
            # Ê®°ÊãüMCPÊúçÂä°Âô®ÂêØÂä®
            from aceflow_mcp_server.unified_server import create_unified_server
            
            server = await create_unified_server(
                runtime_overrides={"mode": "enhanced"}
            )
            
            success = await server.initialize()
            
            if success:
                status = server.get_server_status()
                self.test_results.append({
                    "test": "Server Startup",
                    "status": "PASS",
                    "details": {
                        "initialized": status["initialized"],
                        "mode": status["config"]["mode"],
                        "modules": len(status["modules"])
                    }
                })
                print("  ‚úÖ Server startup: PASS")
            else:
                self.test_results.append({
                    "test": "Server Startup",
                    "status": "FAIL",
                    "error": "Server initialization failed"
                })
                print("  ‚ùå Server startup: FAIL")
            
            await server.stop()
            
        except Exception as e:
            self.test_results.append({
                "test": "Server Startup",
                "status": "ERROR",
                "error": str(e)
            })
            print(f"  üí• Server startup: ERROR - {e}")
    
    async def test_tool_discovery(self):
        """ÊµãËØïÂ∑•ÂÖ∑ÂèëÁé∞"""
        print("üß™ Testing tool discovery...")
        
        try:
            from aceflow_mcp_server.unified_server import create_unified_server
            
            server = await create_unified_server(
                runtime_overrides={"mode": "enhanced"}
            )
            await server.initialize()
            
            # Ê£ÄÊü•Ê†∏ÂøÉÂ∑•ÂÖ∑
            core_module = server.module_manager.get_module("core")
            core_tools = ["aceflow_init", "aceflow_stage", "aceflow_validate"]
            
            # Ê£ÄÊü•Âçè‰ΩúÂ∑•ÂÖ∑
            collaboration_module = server.module_manager.get_module("collaboration")
            collaboration_tools = ["aceflow_respond", "aceflow_collaboration_status", "aceflow_task_execute"]
            
            # Ê£ÄÊü•Êô∫ËÉΩÂ∑•ÂÖ∑
            intelligence_module = server.module_manager.get_module("intelligence")
            intelligence_tools = ["aceflow_intent_analyze", "aceflow_recommend"]
            
            discovered_tools = []
            
            # È™åËØÅÊ†∏ÂøÉÂ∑•ÂÖ∑
            if core_module:
                for tool in core_tools:
                    if hasattr(core_module, tool):
                        discovered_tools.append(f"core.{tool}")
            
            # È™åËØÅÂçè‰ΩúÂ∑•ÂÖ∑
            if collaboration_module:
                for tool in collaboration_tools:
                    if hasattr(collaboration_module, tool):
                        discovered_tools.append(f"collaboration.{tool}")
            
            # È™åËØÅÊô∫ËÉΩÂ∑•ÂÖ∑
            if intelligence_module:
                for tool in intelligence_tools:
                    if hasattr(intelligence_module, tool):
                        discovered_tools.append(f"intelligence.{tool}")
            
            expected_tools = len(core_tools) + len(collaboration_tools) + len(intelligence_tools)
            discovery_success = len(discovered_tools) >= expected_tools * 0.8
            
            self.test_results.append({
                "test": "Tool Discovery",
                "status": "PASS" if discovery_success else "PARTIAL",
                "details": {
                    "discovered_tools": discovered_tools,
                    "total_discovered": len(discovered_tools),
                    "expected_minimum": int(expected_tools * 0.8)
                }
            })
            
            status_icon = "‚úÖ" if discovery_success else "‚ö†Ô∏è"
            print(f"  {status_icon} Tool discovery: {'PASS' if discovery_success else 'PARTIAL'} ({len(discovered_tools)} tools)")
            
            await server.stop()
            
        except Exception as e:
            self.test_results.append({
                "test": "Tool Discovery",
                "status": "ERROR",
                "error": str(e)
            })
            print(f"  üí• Tool discovery: ERROR - {e}")
    
    async def test_tool_invocation(self):
        """ÊµãËØïÂ∑•ÂÖ∑Ë∞ÉÁî®"""
        print("üß™ Testing tool invocation...")
        
        try:
            from aceflow_mcp_server.unified_server import create_unified_server
            
            server = await create_unified_server(
                runtime_overrides={"mode": "enhanced"}
            )
            await server.initialize()
            
            invocation_results = {}
            
            # ÊµãËØïÊ†∏ÂøÉÂ∑•ÂÖ∑Ë∞ÉÁî®
            core_module = server.module_manager.get_module("core")
            if core_module:
                try:
                    result = core_module.aceflow_init(
                        mode="standard",
                        project_name="mcp-test-project"
                    )
                    invocation_results["aceflow_init"] = {
                        "status": "SUCCESS",
                        "has_result": result is not None,
                        "result_type": type(result).__name__
                    }
                except Exception as e:
                    invocation_results["aceflow_init"] = {
                        "status": "ERROR",
                        "error": str(e)
                    }
                
                try:
                    result = core_module.aceflow_validate(
                        mode="basic",
                        target="project"
                    )
                    invocation_results["aceflow_validate"] = {
                        "status": "SUCCESS",
                        "has_result": result is not None,
                        "result_type": type(result).__name__
                    }
                except Exception as e:
                    invocation_results["aceflow_validate"] = {
                        "status": "ERROR",
                        "error": str(e)
                    }
            
            # ÊµãËØïÂçè‰ΩúÂ∑•ÂÖ∑Ë∞ÉÁî®
            collaboration_module = server.module_manager.get_module("collaboration")
            if collaboration_module:
                try:
                    result = collaboration_module.aceflow_collaboration_status()
                    invocation_results["aceflow_collaboration_status"] = {
                        "status": "SUCCESS",
                        "has_result": result is not None,
                        "result_type": type(result).__name__
                    }
                except Exception as e:
                    invocation_results["aceflow_collaboration_status"] = {
                        "status": "ERROR",
                        "error": str(e)
                    }
            
            # ÊµãËØïÊô∫ËÉΩÂ∑•ÂÖ∑Ë∞ÉÁî®
            intelligence_module = server.module_manager.get_module("intelligence")
            if intelligence_module:
                try:
                    result = intelligence_module.aceflow_intent_analyze(
                        user_input="Create a new web project"
                    )
                    invocation_results["aceflow_intent_analyze"] = {
                        "status": "SUCCESS",
                        "has_result": result is not None,
                        "result_type": type(result).__name__
                    }
                except Exception as e:
                    invocation_results["aceflow_intent_analyze"] = {
                        "status": "ERROR",
                        "error": str(e)
                    }
            
            successful_invocations = sum(1 for r in invocation_results.values() 
                                       if r["status"] == "SUCCESS")
            total_invocations = len(invocation_results)
            
            invocation_success = successful_invocations >= total_invocations * 0.8
            
            self.test_results.append({
                "test": "Tool Invocation",
                "status": "PASS" if invocation_success else "PARTIAL",
                "details": {
                    "invocation_results": invocation_results,
                    "successful_invocations": successful_invocations,
                    "total_invocations": total_invocations,
                    "success_rate": successful_invocations / total_invocations if total_invocations > 0 else 0
                }
            })
            
            status_icon = "‚úÖ" if invocation_success else "‚ö†Ô∏è"
            print(f"  {status_icon} Tool invocation: {'PASS' if invocation_success else 'PARTIAL'} ({successful_invocations}/{total_invocations})")
            
            await server.stop()
            
        except Exception as e:
            self.test_results.append({
                "test": "Tool Invocation",
                "status": "ERROR",
                "error": str(e)
            })
            print(f"  üí• Tool invocation: ERROR - {e}")
    
    async def test_resource_access(self):
        """ÊµãËØïËµÑÊ∫êËÆøÈóÆ"""
        print("üß™ Testing resource access...")
        
        try:
            from aceflow_mcp_server.unified_server import create_unified_server
            
            server = await create_unified_server(
                runtime_overrides={"mode": "enhanced"}
            )
            await server.initialize()
            
            # ÊµãËØïËµÑÊ∫êËÆøÈóÆÔºàÁÆÄÂåñÁâàÔºåÂõ†‰∏∫Êàë‰ª¨Ê≤°ÊúâÂÆåÊï¥ÁöÑËµÑÊ∫êÂÆûÁé∞Ôºâ
            resource_tests = {}
            
            # Ê£ÄÊü•Ê†∏ÂøÉÊ®°ÂùóÊòØÂê¶ÊúâËµÑÊ∫êÊñπÊ≥ï
            core_module = server.module_manager.get_module("core")
            if core_module and hasattr(core_module, 'get_resources'):
                try:
                    resources = core_module.get_resources()
                    resource_tests["core_resources"] = {
                        "status": "SUCCESS",
                        "resource_count": len(resources) if resources else 0
                    }
                except Exception as e:
                    resource_tests["core_resources"] = {
                        "status": "ERROR",
                        "error": str(e)
                    }
            else:
                resource_tests["core_resources"] = {
                    "status": "NOT_IMPLEMENTED",
                    "note": "Resource access not fully implemented"
                }
            
            # Ê£ÄÊü•ÊúçÂä°Âô®Áä∂ÊÄÅ‰Ωú‰∏∫ËµÑÊ∫êËÆøÈóÆÁöÑÊõø‰ª£ÊµãËØï
            try:
                status = server.get_server_status()
                resource_tests["server_status"] = {
                    "status": "SUCCESS",
                    "has_config": "config" in status,
                    "has_modules": "modules" in status
                }
            except Exception as e:
                resource_tests["server_status"] = {
                    "status": "ERROR",
                    "error": str(e)
                }
            
            successful_resources = sum(1 for r in resource_tests.values() 
                                     if r["status"] in ["SUCCESS", "NOT_IMPLEMENTED"])
            total_resources = len(resource_tests)
            
            resource_success = successful_resources >= total_resources * 0.5
            
            self.test_results.append({
                "test": "Resource Access",
                "status": "PASS" if resource_success else "PARTIAL",
                "details": {
                    "resource_tests": resource_tests,
                    "successful_resources": successful_resources,
                    "total_resources": total_resources
                }
            })
            
            status_icon = "‚úÖ" if resource_success else "‚ö†Ô∏è"
            print(f"  {status_icon} Resource access: {'PASS' if resource_success else 'PARTIAL'}")
            
            await server.stop()
            
        except Exception as e:
            self.test_results.append({
                "test": "Resource Access",
                "status": "ERROR",
                "error": str(e)
            })
            print(f"  üí• Resource access: ERROR - {e}")
    
    async def test_error_handling(self):
        """ÊµãËØïÈîôËØØÂ§ÑÁêÜ"""
        print("üß™ Testing error handling...")
        
        try:
            from aceflow_mcp_server.unified_server import create_unified_server
            
            server = await create_unified_server(
                runtime_overrides={"mode": "enhanced"}
            )
            await server.initialize()
            
            error_handling_tests = {}
            
            # ÊµãËØïÊó†ÊïàÂ∑•ÂÖ∑Ë∞ÉÁî®
            core_module = server.module_manager.get_module("core")
            if core_module:
                try:
                    # ÊµãËØïÁº∫Â∞ëÂøÖÈúÄÂèÇÊï∞ÁöÑË∞ÉÁî®
                    result = core_module.aceflow_init()  # Áº∫Â∞ëmodeÂèÇÊï∞
                    error_handling_tests["missing_required_param"] = {
                        "status": "UNEXPECTED_SUCCESS",
                        "note": "Should have failed but didn't"
                    }
                except Exception as e:
                    error_handling_tests["missing_required_param"] = {
                        "status": "EXPECTED_ERROR",
                        "error_type": type(e).__name__,
                        "error_message": str(e)
                    }
                
                try:
                    # ÊµãËØïÊó†ÊïàÂèÇÊï∞ÂÄº
                    result = core_module.aceflow_init(
                        mode="invalid_mode_value",
                        project_name="test"
                    )
                    error_handling_tests["invalid_param_value"] = {
                        "status": "SUCCESS_OR_HANDLED",
                        "note": "Invalid parameter handled gracefully"
                    }
                except Exception as e:
                    error_handling_tests["invalid_param_value"] = {
                        "status": "EXPECTED_ERROR",
                        "error_type": type(e).__name__
                    }
            
            # ÊµãËØïÈÖçÁΩÆÈîôËØØÂ§ÑÁêÜ
            try:
                from aceflow_mcp_server.unified_config import UnifiedConfig
                invalid_config = UnifiedConfig(mode="totally_invalid_mode")
                errors = invalid_config.get_validation_errors()
                
                error_handling_tests["config_validation"] = {
                    "status": "SUCCESS",
                    "validation_errors_detected": len(errors) > 0,
                    "error_count": len(errors)
                }
            except Exception as e:
                error_handling_tests["config_validation"] = {
                    "status": "ERROR",
                    "error": str(e)
                }
            
            successful_error_handling = sum(1 for r in error_handling_tests.values() 
                                          if r["status"] in ["EXPECTED_ERROR", "SUCCESS", "SUCCESS_OR_HANDLED"])
            total_error_tests = len(error_handling_tests)
            
            error_handling_success = successful_error_handling >= total_error_tests * 0.7
            
            self.test_results.append({
                "test": "Error Handling",
                "status": "PASS" if error_handling_success else "PARTIAL",
                "details": {
                    "error_handling_tests": error_handling_tests,
                    "successful_error_handling": successful_error_handling,
                    "total_error_tests": total_error_tests
                }
            })
            
            status_icon = "‚úÖ" if error_handling_success else "‚ö†Ô∏è"
            print(f"  {status_icon} Error handling: {'PASS' if error_handling_success else 'PARTIAL'}")
            
            await server.stop()
            
        except Exception as e:
            self.test_results.append({
                "test": "Error Handling",
                "status": "ERROR",
                "error": str(e)
            })
            print(f"  üí• Error handling: ERROR - {e}")
    
    def generate_mcp_test_report(self):
        """ÁîüÊàêMCPÊµãËØïÊä•Âëä"""
        print("\n" + "=" * 50)
        print("üìä MCP PROTOCOL COMPATIBILITY REPORT")
        print("=" * 50)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["status"] == "PASS"])
        partial_tests = len([r for r in self.test_results if r["status"] == "PARTIAL"])
        failed_tests = len([r for r in self.test_results if r["status"] == "FAIL"])
        error_tests = len([r for r in self.test_results if r["status"] == "ERROR"])
        
        print(f"Total Tests: {total_tests}")
        print(f"‚úÖ Passed: {passed_tests}")
        print(f"‚ö†Ô∏è Partial: {partial_tests}")
        print(f"‚ùå Failed: {failed_tests}")
        print(f"üí• Errors: {error_tests}")
        
        success_rate = ((passed_tests + partial_tests) / total_tests) * 100 if total_tests > 0 else 0
        print(f"Success Rate: {success_rate:.1f}%")
        
        print("\nüìã Detailed Results:")
        for result in self.test_results:
            status_icons = {
                "PASS": "‚úÖ",
                "PARTIAL": "‚ö†Ô∏è", 
                "FAIL": "‚ùå",
                "ERROR": "üí•"
            }
            icon = status_icons.get(result["status"], "‚ùì")
            print(f"  {icon} {result['test']}: {result['status']}")
            
            if "error" in result:
                print(f"    Error: {result['error']}")
            elif "details" in result and result["details"]:
                details = result["details"]
                if "discovered_tools" in details:
                    print(f"    Tools: {details['total_discovered']} discovered")
                elif "successful_invocations" in details:
                    print(f"    Invocations: {details['successful_invocations']}/{details['total_invocations']} successful")
        
        # MCPÂÖºÂÆπÊÄßËØÑ‰º∞
        print("\nüéØ MCP Compatibility Assessment:")
        if success_rate >= 90:
            print("üéâ EXCELLENT: Full MCP protocol compatibility")
            compatibility_status = "FULLY_COMPATIBLE"
        elif success_rate >= 75:
            print("‚úÖ GOOD: High MCP protocol compatibility")
            compatibility_status = "HIGHLY_COMPATIBLE"
        elif success_rate >= 50:
            print("‚ö†Ô∏è MODERATE: Partial MCP protocol compatibility")
            compatibility_status = "PARTIALLY_COMPATIBLE"
        else:
            print("‚ùå POOR: Limited MCP protocol compatibility")
            compatibility_status = "LIMITED_COMPATIBILITY"
        
        # ‰øùÂ≠òÊä•Âëä
        report = {
            "timestamp": __import__("time").time(),
            "compatibility_status": compatibility_status,
            "success_rate": success_rate,
            "test_results": self.test_results,
            "summary": {
                "total": total_tests,
                "passed": passed_tests,
                "partial": partial_tests,
                "failed": failed_tests,
                "errors": error_tests
            }
        }
        
        with open("mcp_compatibility_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ Detailed report saved to: mcp_compatibility_report.json")
        
        return compatibility_status in ["FULLY_COMPATIBLE", "HIGHLY_COMPATIBLE"]

async def main():
    """‰∏ªÊµãËØïÂáΩÊï∞"""
    print("üöÄ AceFlow MCP Server - Real MCP Client Test")
    print("=" * 50)
    
    tester = MCPClientTester()
    
    try:
        await tester.test_mcp_protocol_compatibility()
        return 0
        
    except Exception as e:
        print(f"‚ùå MCP client test failed: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)